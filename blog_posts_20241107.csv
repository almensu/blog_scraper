title,summary,date,url
从小黄鸭到 AI 助手：程序员的新时代调试秘诀,"现在到了 AI 时代，AI 就是程序员们升级版的“小黄鸭”，不仅能耐心的听你解释代码，它还会思考，会提问，会给出建议。就像金庸小说里面的扫地老僧，当你正在苦恼一个棘手的并发问题时，它会适时地问：""你考虑过死锁的情况吗？""当你在纠结代码结构时，它会建议：""这里如果用观察者模式，是不是会更优雅一些？""","November 3, 2024",https://baoyu.io/blog/from-rubber-duck-to-ai-assistant-programmer-debugging-secrets
OpenAI 在 Reddit 上的 Ask Me Anything 的一些回复,OpenAI 在 Reddit 上的 Ask Me Anything 的一些回复,"October 31, 2024",https://baoyu.io/blog/openai-reddit-ama-responses
v0.dev prompt 结构详细解释（10/24/2024）,通过图形解释 v0 Prompt 结构,"October 30, 2024",https://baoyu.io/blog/v0-dev-prompt-structure-explanation
微服务的本质不是模块的拆分，而是组织架构的拆分,微服务架构只是一种技术手段，使用微服务架构的目的，不是为了让你的架构更流行更酷，也不是为了让你的服务尽可能小，而是借助微服务的架构，让团队规模变小，大开发部门变成各个小的开发小组，并且各个小组应该尽可能独立，减少相互依赖，减少沟通成本。,"October 29, 2024",https://baoyu.io/blog/microservices-organizational-structure-split
我的一点不成熟的程序员学习设计经验,有朋友问程序员如何学设计，我的一点不成熟建议。,"October 28, 2024",https://baoyu.io/blog/programmer-learning-design-experience
如何写好提示词？,最近录了个视频，我并不擅长做教学视频，录的质量不算好，但是内容还是精心准备的，slides 都写了 110 页，差不多有 2 小时的时间。,"October 23, 2024",https://baoyu.io/blog/how-to-write-good-prompt
为什么越是老程序员学 React 越是难学,"初学者：第二次尝试学习 React 了，还是学不会，感觉上一次的学习经历没留下任何记忆。 

大师：React 是这样的。React 是这样的。

— 象牙山刘能","October 19, 2024",https://baoyu.io/blog/why-senior-developers-find-react-harder-to-learn
如何用 AI 自动生成一张“智慧卡片”？,输入一句话，帮你生成一张“智慧卡片”图片。,"October 14, 2024",https://baoyu.io/blog/prompt/smart-card-prompt
伪代码提示词“汉语新解”详解,李继刚写的汉语新解，输入任意汉语，就可以生成一副卡片，不仅文案写的好，而且生成的卡片美观大方，一段几百字的提示词顶得上几千行代码写出来的应用程序效果，将伪代码和 Claude 的能力结合的绝到好处，真的是了不起👍佩服佩服！鉴于很多人不太理解伪代码和如何用伪代码写 Prompt，我将这段经典的 Prompt 拆解并结合一个例子解释一下。,"October 14, 2024",https://baoyu.io/blog/prompt/chinese-new-interpretation-pseudocode-explanation
如何在输入内容很长的情况下，让 GPT 不“偷懒”？,最近比较好的解决了一个困扰我很久的 Prompt 难题：如何在输入内容很长的情况下，让 GPT 不偷懒？,"October 12, 2024",https://baoyu.io/blog/prompt-engineering/how-to-prevent-gpt-from-being-lazy-with-long-inputs
GPT 无法翻译超长内容的提示词优化尝试,最近科技文章翻译 GPT https://chatgpt.com/g/g-uBhKUJJTl-ke-ji-wen-zhang-fan-yi 一直有用户反馈内容长了就不翻译，变成摘要了，这是由于内容一长，GPT-4o “变懒”了，于是不翻译完整内容，只是摘要。,"October 9, 2024",https://baoyu.io/blog/gpt/gpt-translation-long-content-optimization
"What You Need Is Not an AI Agent, But an AI-Friendly Workflow","The concept of AI agents is gaining popularity, and some people see them as a silver bullet for solving problems with AI. The hype around AI agents suggests that if you have one, many challenges can be easily tackled. However, there are also those who argue that AI agents are overhyped and lack real, viable applications.","October 9, 2024",https://baoyu.io/blog/ai-agent/what-you-need-is-ai-friendly-workflow
AI 的笨是可知的，小弟的笨是不可知的,"匿名投稿：《AI 的笨是可知的，小弟的笨是不可知的》

来自一位大厂朋友的经验分享，谈他在用 AI 辅助写代码的感受","October 7, 2024",https://baoyu.io/blog/ai/ai-dumbness-is-knowable-human-dumbness-is-unknowable
用 AI 反向代码案例：揭秘 OpenAI Canvas 如何根据用户操作拼接生成 Prompt,用一个实例来看看如何借助 AI 来反向代码，帮助你更好的理解一些商业产品功能的实现。这里以 OpenAI 新推出的 Canvas 为例，我们看看它是如何根据用户的操作生成不同 Prompt 的。,"October 7, 2024",https://baoyu.io/blog/ai/reverse-engineering-openai-canvas-prompt-generation
对比一下两种不同生成摘要提示词的效果,我分别用两种不同的提示词对前面一篇文章生成了摘要，这效果差别有点大！,"October 6, 2024",https://baoyu.io/blog/software-engineering/compare-two-methods-for-generating-summary-prompts
如何摆脱烂代码陷阱：从重构到最佳实践的实战经验,你是否被烂代码困扰？Martin Fowler 的代码异味理论指出，烂代码背后往往隐藏着更深层次的问题。本篇文章分享了如何通过严格的代码审查、系统设计、技术债务管理以及最佳实践，帮助团队从烂代码的泥潭中解脱出来，显著提高开发效率。学会如何有效重构老项目，如何制定最佳实践，让你的团队从“屎山”代码中脱胎换骨！,"October 6, 2024",https://baoyu.io/blog/software-engineering/escape-bad-code-trap-refactoring-best-practices
对于小型团队而言，当代码量逐渐变大，有什么更好的控制代码质量的方法吗？,对于小型团队而言，当代码量逐渐变大（大至一万行左右）时，有什么更好的控制代码质量的方法吗？,"October 6, 2024",https://baoyu.io/blog/software-engineering/better-code-quality-control-for-growing-small-teams
CloudFlare 使用 Workers 和 Nextjs 的深度集成,以前 CloudFlare 只提供了 Cloudflare Pages 的方式集成 Nextjs，现在有了 OpenNext 项目后，Nextjs 也可以和 Cloudflare Workers 集成，这意味着你创建一个项目，不仅有网站，还有 Workers。,"October 6, 2024",https://baoyu.io/blog/cloudflare/cloudflare-workers-nextjs-deep-integration
分享一点前沿 AI 用法：用 o1 逆向代码,o1 似乎一直没啥热度，毕竟大多数人不用做数学做学术，写代码也有很多代替的。我最近倒是研究出来一个有意思的用法，就是用它逆向代码。对于 Web 应用程序，代码保护的方式就是混淆，但是混淆后的代码你是可以轻松获取到的。可以用 o1 来反向一些有价值的但是混淆保护后的代码，效果惊人。,"October 6, 2024",https://baoyu.io/blog/ai/o1-cutting-edge-ai-use-reverse-engineering-code
像用实习生一样用 AI 辅助你编程,"> 我是不敢让 ai 帮我写程序的，每回问它的问题，十次倒有八次是错的，问完之后还要自己去网上搜一遍，然后反复测试，才敢写进代码。 不知道大家怎么甩手给它的。
>
> ——响马","October 5, 2024",https://baoyu.io/blog/ai/use-ai-to-assist-programming-like-an-intern
在构建 Prompt 时，如何避免把翻译内容当成对话内容？,这是一个常见的问题，比如我有一个翻译的 GPT 或者 LLM 应用，有以后 AI 会混淆输入的内容和指令，不清楚你说的话是要它翻译还是在跟它对话。,"October 3, 2024",https://baoyu.io/blog/prompt-engineering/how-to-avoid-translated-content-being-treated-as-dialog
OpenAI 的 PlayGround 新增加的提示词优化工具，以及它的提示词,"OpenAI's ""meta"" prompt for optimizing GPT prompts on the playground.","October 3, 2024",https://baoyu.io/blog/prompt/openais-meta-prompt-for-optimizing-gpt-prompts
Full Prompt of ChatGPT 4o with canvas,Full Prompt of ChatGPT 4o with canvas and how to get the full prompt,"October 3, 2024",https://baoyu.io/blog/prompt/full-prompt-chatgpt-4o-with-canvas
将博客系统迁移至了 CloudFlare,记录我将博客系统迁移到 CloudFlare 的经历。,"October 2, 2024",https://baoyu.io/blog/tech/migrate-blog-to-cloud-flare
提示工程师是最短命的职业吗？提示工程已经死了吗？,随着 OpenAI 新的推理模型 o1 preview 的发布，它能自动生成高质量思维链，很简单的提示词也可以得到很不错的效果，所以很多人觉得提示工程已经死了，提示工程师是世上最短命的职业之一。,"September 20, 2024",https://baoyu.io/blog/prompt-engineering/is-prompt-engineering-dead
推理规模扩展定律（inference scaling law）会成为大力出奇迹的新方向吗？它能带我们走进 AGI 吗？,OpenAI 新发布的推理模型 o1 开辟了一个新的范式，就是推理规模扩展定律（inference scaling law），它到底是什么？能带我们走进 AGI 吗？,"September 15, 2024",https://baoyu.io/blog/ai/o1-and-inference-scaling-law
在 o1 发布后，回顾当年 Jim Fan 对 Q*的预测，他对了吗？,去年 Jim Fan 曾对传闻中的 Q* 有了一些有趣的猜测，让我们回头看看是不是对的。,"September 15, 2024",https://baoyu.io/blog/ai/o1-and-alphago
大厂与其山寨 Cursor，不如做个好用的 AI 邮件客户端,大厂抄 Cursor，这样追在别人屁股后面跑是没有前途的，Cursor 已经是红海了，就算大厂又如何，微软比 Cursor 大多少？结果 GitHub Copilot 也没打过 Cursor，大厂还不如多投资几家像 Cursor 这样的公司，为什么非要抄他们呢！,"August 25, 2024",https://baoyu.io/blog/ai/big-companies-instead-of-copying-cursor-should-make-ai-email-client
我的代码编辑器使用史，从语法高亮到 AI 生成,记事本 -> 语法高亮 -> 自动完成 -> AI 智能生成 -> ?,"August 24, 2024",https://baoyu.io/blog/coding/my-experience-with-code-editor-evolution
The full prompt of v0.dev,"You are v0, an AI assistant created by Vercel to be helpful, harmless, and honest.","August 21, 2024",https://baoyu.io/blog/prompt-engineering/v0-dev-prompt
生成式 AI 路由,在 LinkedIn 这个 AI 产品架构中，有一个重要的模块叫 路由（Routing），这通常是当应用比较复杂，需要用不同的专业模型或者智能体来处理不同的任务，比如当用户希望获得简历方面的建议，就可以交给简历评估的智能体负责；当用户希望获得某个公司的资讯，就可以由专门的公司资讯智能体负责。,"July 31, 2024",https://baoyu.io/blog/ai/generative-ai-router
翻译 GPT 的提示词更新和优化,我最近对我的翻译 GPT 做了一点优化，让其更好的跟随指令。,"July 31, 2024",https://baoyu.io/blog/prompt-engineering/translator-gpt-prompt-v2-1-improvement
LinkedIn 团队构建生成式 AI 产品的经验教训,LinkedIn 的这个分享很有价值，他们分享了在构建生成式 AI 产品时的一些宝贵经验教训,"July 28, 2024",https://baoyu.io/blog/ai/linkedin-team-building-generative-ai-lessons
我的隐私信息会被大语言模型拿去训练吗？,隐私问题是一个大家都很关注的问题，以前搜索时代，大家担心搜索引擎会泄露自己的身份信息，私密聊天记录等。现在大语言时代，同样有类似担心，担心自己的隐私信息会被大语言模型拿去训练，从而一不小心泄露自己的隐私信息。,"July 22, 2024",https://baoyu.io/blog/ai/will-my-private-information-be-used-for-training
你需要的不是智能体，而是一个适合 AI 的工作流,现在 AI 智能体（AI Agent）的概念很火，似乎智能体是用 AI 解决问题的银弹，有了智能体就可以解决很多问题。但也有很多人有不同意见，认为智能体不过是噱头，并没有看到靠谱的应用场景。,"July 7, 2024",https://baoyu.io/blog/ai/you-dont-need-agent-but-ai-suitable-workflow
梅琳达·盖茨在斯坦福 2024 毕业典礼上的演讲,"海洋中有两朵浪花，一大一小，正朝着岸边涌去。眼看离岸越来越近，大浪忽然意识到了即将发生的事。它看到前方的浪花一个接一个拍打在岸边，瞬间消失不见。大浪顿时慌了神，对小浪喊道：""完了完了，我们就要到头了！""小浪却笑眯眯地说：""别担心，我们不会有事的。""大浪急了：""你不明白啊！我们马上就要消失了！""小浪依然淡定自若，说道：""不会的。我用六个字就能告诉你为什么。""""什么意思？""大浪疑惑地问。小浪答道：""汝非浪乃水也。""","July 5, 2024",https://baoyu.io/blog/life/2024-stanford-commencement-speech-melinda-french-gates
AI 时代计算机专业会涨薪还是降薪？,此前，在 2024 年世界政府峰会，英伟达 CEO 黄仁勋在被问及“如果站在科技的前沿，人们到底应该学习什么”时表示：“学计算机的时代过去了，生命科学是未来”。老黄的这个观点再结合现在 AI 的能力越来越强，这让报考计算机专业的考生会担心：未来 AI 时代计算机专业会涨薪还是降薪？,"June 29, 2024",https://baoyu.io/blog/ai/ai-computer-science-salary-rise-or-fall
高考志愿一点建议：在纠结的时候尽量让自己的决定是“双向门”决策,现在正是高考报志愿的时候，也是广大考生和家长极其纠结的时候，尤其是那些成绩不错有很多选择的考生，既纠结学校又要纠结专业。,"June 27, 2024",https://baoyu.io/blog/life/college-application-tip-make-decisions-two-way-doors
什么时候该用多智能体是不是一定要用多智能体？,以翻译为例，讨论什么时候该用多智能体是不是一定要用多智能体。,"June 26, 2024",https://baoyu.io/blog/ai/when-to-use-multi-agent-systems-or-cot
当 AI 能考上一本，十年寒窗苦读还有意义吗？,家里有亲戚朋友参加高考的话，就知道上个一本线也没有那么容易，如果我第一次参加高考的时候看到这新闻，估计要怀疑人生了。十年寒窗苦读，最后还不如一个 AI 的成绩，学习还有意义吗？,"June 25, 2024",https://baoyu.io/blog/ai/ai-get-into-top-colleges-meaning-of-hard-study
Prompt 高级技巧：借助伪代码精准的控制 LLM 的输出结果和定义其执行逻辑,当你需要更精准的控制 LLM 的输出结果和定义其执行逻辑时，该怎么做？,"June 15, 2024",https://baoyu.io/blog/prompt-engineering/advanced-prompting-using-pseudocode-to-control-llm-output
小技巧：GPT 多了怎么管理？,使用 ChatGPT 的 @ 功能，可以快速找到你用过的 GPT，或者根据关键字检索到，然后再输入你要它完成的任务，和你单独打开 GPT 输入效果是一样的。,"June 14, 2024",https://baoyu.io/blog/gpt/tips-for-managing-multiple-gpts
计算机专业还值得报考吗？,从我二十多年前参加高考以来，每年高考一结束，#计算机专业还值得报考吗# 就一直热门话题，一些人认为计算机发展了这么多年已经饱和，可能面临毕业即失业的风险，而另一些人则认为计算机专业依然是未来的热门专业，就业前景广阔。,"June 13, 2024",https://baoyu.io/blog/career/is-computer-science-still-worth-studying
AI 民科和 AI 科学家之间的差距,从一段翻译 Prompt 说起。,"June 13, 2024",https://baoyu.io/blog/ai/gap-between-ai-amateurs-and-ai-scientists
测试 Chrome 内置  Gemini Nano 大语言模型 (4bit 3.25B) 的方法,如何测试 Chrome 内置的 Gemini Nano 大语言模型,"June 8, 2024",https://baoyu.io/blog/ai/how-to-enable-gemini-nano-for-chrome
问答：有校对好的视频文稿如何用文稿纠正字幕错误？,我有校对好的视频文稿，但是 Whisper 生成的字幕有错误，我该如何用文稿纠正字幕错误？,"June 7, 2024",https://baoyu.io/blog/prompt-engineering/qa-how-to-correct-subtitle-with-text
问答：如何使用 GPT 知道我写 R 代码？,我用文字描述的方式请教 copilot 指导我写 R 代码（科研作图用），但效果不好。与此同时我查到一现成的完美代码，但因为看不懂，无法根据实际情况调整，所以也无法复现。这个时候我想让 copilot 帮我协调一下，即用现成的代码基础上根据我的说明进行调整，promote 我应该一次性说清楚，还是分多次？,"June 7, 2024",https://baoyu.io/blog/ai/qa-how-to-use-gpt-to-write-code
为什么对于有的人来说 ChatGPT 并没有什么卵用？,看到微博上一位医生这条被 ChatGPT-4o 坑的微博，尝试从技术角度解读一下，这样也许能更好的理解现阶段大语言模型的优缺点，在实际应用中能扬长避短。,"June 2, 2024",https://baoyu.io/blog/ai/why-do-someone-think-chatgpt-doesnot-really-work-for-them
问答：在 RAG 应用中，GPT-3.5 足够就足够了吗？,问：请问这个观点对不对：“对于搭建企业本地知识库来说，比如使用 RAG 方式，国内几家大模型都可以胜任（用 gpt4 的话有点杀鸡用牛刀的意思），关键在于应用端的调教”？先说结论：我觉得没毛病，GPT 3.5 的能力就足够胜任绝大部分场景了，但 GPT-4 不是杀鸡牛刀，而是如虎添翼甚至化腐朽为神奇。,"April 16, 2024",https://baoyu.io/blog/rag/qa-is-gpt35-good-enough-for-rag
一段能帮你给代码生成单元测试的提示词分析,这是一段能帮你给代码生成单元测试的提示词，针对 Claude 3，但理论上来说可以适用于绝大部分模型。,"March 28, 2024",https://baoyu.io/blog/prompt-engineering/prompt-for-generating-unit-tests-for-your-code
